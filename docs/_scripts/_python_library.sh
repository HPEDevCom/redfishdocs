#!/usr/bin/bash

# Version 0.31

# Script name: _python_library.sh 

# This script generates a markdown output from Sphinx into python-library-referenceXXXX.md adapts this
# file to better match the Redocly markdown look and feel.

# The Sphinx MD output generation is performed in a local clone of the internal (or external) python-ilorest-library 
# GitHub repo. Then, the output of this run is copied to the Redocly repo and processed. Hence, it is recommended to have a Internet connection 
# reaching the public GitHub repo, or an HPE internal connection to reach the internal one, in order to work on a up-to-date clone.

# ToDo: 
#       * Investigate why sometimes, the Reference.md file generated by the Sphinx process contains a TOC (toctree), and sometimes not !
#         When the TOC is present, it must be removed as well as permalinks. Other operations have to be performed to make it clean for Redocly.
#       * Investigate whether it is better to use the internal or the external python-ilorest-library GitHUb site
#       * Investigate pdoc (https://github.com/mitmproxy/pdoc) to see if its MD output is easier to adapt
#         to Redocly.

### Variable definitions. Review and adapt/edit if needed.
export libraryFullVersion="3200"
export libraryShortVersion="${libraryFullVersion:0:1}.${libraryFullVersion:1:1}"
export redoclyRepolocation="/Git-Repo/CloneOfPrivate-hpe-ilo-redocly"

#export libraryRepoLocation="/Git-Repo/CloneOfExternal-HpePythonRedfishLibrary" 
export libraryRepoLocation="/Git-Repo/CloneOfInternal-HpePythonRedfishLibrary"

export referenceFileLocation="${redoclyRepoLocation}docs/redfishClients/python-redfish-library/${libraryShortVersion}"
export pythonHpeVenv="${HOME}/PythonHpeVenv"
export referenceFileName="python-library-reference${libraryFullVersion}.md"
export redoclyRepoLocation="/Git-Repo/CloneOfPrivate-hpe-ilo-redocly/"
export h1Title="HPE Python Redfish library v${libraryShortVersion} reference documentation"
export sectionDescription="This section describes the HPE Python Library that you can use for writing your own Redfish clients. It is an alternative to the <a href=\"https://github.com/DMTF/python-redfish-library\" target=\"_blank\">DMTF Python Redfish Library</a>\n" 
export tempFile="${referenceFileLocation}/tmpFile"
if [ RedoclyRealm == "false" ] ; then
  export seoHeader='---\nseo:\ntitle: HPE Python Redfish library\ndisableLastModified: false\ntoc:\n   enable: true\n   maxDepth: 3\n---\n'
else
    export seoHeader='---\nseo:\ntitle: HPE Python Redfish library\nmarkdown:\n  toc:\n    hide: true\n    depth: 3\n  lastUpdateBlock:\n    hide: false\nbreadcrumbs:\n  hide: false\n---\n'
fi


# Make sure Sphinx and the sphinx-markdown-builder is present in the 
# Python enviroment
echo "Loading Python environment and listing Sphinx related modules"
source ${pythonHpeVenv}/bin/activate
pip list | grep -E 'Sphinx|sphinxcontrib|sphinx-markdown-builder|python-ilorest-library'

# The output of the previous command should be something like:
# python-ilorest-library        4.1.0.0
# Sphinx                        6.1.3
# sphinxcontrib-applehelp       1.0.4
# sphinxcontrib-devhelp         1.0.2
# sphinxcontrib-htmlhelp        2.0.1
# sphinxcontrib-jsmath          1.0.1
# sphinxcontrib-qthelp          1.0.3
# sphinxcontrib-restbuilder     0.3
# sphinxcontrib-serializinghtml 1.1.5

# Double check that the 'sphinx-build' program can be launched
sphinx-build --help &>/dev/null
if [ $? != 0 ] ; then
   echo -e "\nProblem with sphinx-build. Exiting..."
   exit 1
fi

# Make sure a clone of the python-ilorest-library GitHub exists and
#  the master branch is up to date.
cd ${libraryRepoLocation}/docs
git checkout master &>/dev/null
git remote update
git pull

# TBD: Check above command return status and exit if problem.


# Make sure that the 'sphinx_markdown_builder' extension is present in 
# the docs/conf.py, as well as the language = en variable.
# If not, need to add 'sphinx_markdown_builder' to the extensions array and update the language key.

# The following should be launched only if requirements are missing !
sed -i -e "s/extensions = \[\(.*\)\]/extensions = \[\1, \'sphinx_markdown_builder\'\]/g ; s/^language = .*$/language = \'en\'/g" conf.py

# Build sphinx with markdown output.
sphinx-build -b markdown ./ .build/md


# Copy the Reference.md file to the Redocly repo
cp .build/md/Reference.md  ${referenceFileLocation}/${referenceFileName}
# Keep original for troubleshooting reasons
cp ${referenceFileLocation}/${referenceFileName} ${referenceFileLocation}/_raw_${referenceFileName}

# Restore the docs/conf.py file to original and remove the build directory
echo "Intermediate clean up"
git restore conf.py
rm -r .build/ 2>/dev/null

# Remove everything (i.e TOC) before h1/title
sed -e '0,/^# Reference Documentation/d' ${referenceFileLocation}/${referenceFileName} \
     >  ${tempFile}

# Prepend H1 title in temporary file
sed -i -e "1 i\# ${h1Title}" ${tempFile}

# Prepend Redocly `seo` header and append above temporary file
echo -e ${seoHeader} > ${referenceFileLocation}/${referenceFileName}
cat ${tempFile} >> ${referenceFileLocation}/${referenceFileName}
rm ${tempFile}

# Add little description of the content of this documentation section
tac ${referenceFileLocation}/${referenceFileName} | \
    sed -e "/^# ${h1Title}/i  ${sectionDescription}"  | \
    tac > ${tempFile}
cat ${tempFile} > ${referenceFileLocation}/${referenceFileName}
rm ${tempFile}

# Remove permalinks starting with "[¶]" if any
sed -i -e 's/^\(.*\) \[¶\].*$/\1/' ${referenceFileLocation}/${referenceFileName}

# Remove double span directives
sed -i -e 's?`<span class="pre">\(.*\)</span>` `<span class="pre">\(.*\)</span>`\(.*\)?`\1\2\3`?' ${referenceFileLocation}/${referenceFileName}


# Remove one empty line when 2 are found
sed -i -e '/^$/{N;/^\n$/d;}' ${referenceFileLocation}/${referenceFileName}

# Change h3 (### _class_/_exceptions_/_property_) headings into h4 headings (#### class/exceptions/property) with a starting and trailing \n
sed -i -e 's/^### _class_\(.*\)$/\n#### class\1\n/ ; 
           s/^### _exception_\(.*\)$/\n#### exception\1\n/ ; 
           s/^#### _property_\(.*\)$/\n#### property\1\n/' \
          ${referenceFileLocation}/${referenceFileName}


# Use "-" char for un-ordered lists instead of "*"
sed -i -e 's/\* \*\*\(.*\)/- **\1/' ${referenceFileLocation}/${referenceFileName}

# Remove "#" before "Intended usage"
sed -i -e 's/^#\(Intended Usage:.*\)$/\1/' ${referenceFileLocation}/${referenceFileName}

# Remove arguments in h3 headings. No need of args, since they are described further.
# Ex:            #### class redfish.rest.containers.RestRequest(path, method='GET', data='', url=None)
# should become: #### class redfish.rest.containers.RestRequest()
# TBD

# Add a fragment strings  "see `class`" like in "see `RestClient"
# TBD 

# Adjust "_" chars that leads to italic


# Remove "\" char before string "client_kwargs" (To be investigated)

# Insert "`" around "redfish."

# Convert **NOTES** to redocly admonitions

# TBD

# Cleanup
echo "Final clean up"
rm ${referenceFileLocation}/_raw_${referenceFileName}

